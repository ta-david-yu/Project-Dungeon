// Fill out your copyright notice in the Description page of Project Settings.

#pragma once

#include "CoreMinimal.h"
#include "GameFramework/PlayerController.h"
#include "InputActionValue.h"
#include "CombatPlayerController.generated.h"

UENUM()
enum class ECharacterControlMode
{
	Free, // The movement input is based on player's direct input
	NavigatingToTarget, // The movement input is generated by AI navigation system
};


UCLASS()
class PROJECTDUNGEON_API ACombatPlayerController : public APlayerController
{
	GENERATED_BODY()

private:	
	UPROPERTY(VisibleAnywhere, BlueprintReadOnly, Category = Combat, meta = (AllowPrivateAccess = "true"))
	class UCombatTargetControllerComponent *TargetController;
	
	UPROPERTY(EditAnywhere, BlueprintReadOnly, Category = Input, meta = (AllowPrivateAccess = "true"))
	class UInputMappingContext* DefaultMappingContext;

	UPROPERTY(EditAnywhere, BlueprintReadOnly, Category = Input, meta = (AllowPrivateAccess = "true"))
	class UInputAction* MoveAction;
	
	UPROPERTY(EditAnywhere, BlueprintReadOnly, Category = Input, meta = (AllowPrivateAccess = "true"))
	class UInputAction* LookAction;
	
	UPROPERTY(EditAnywhere, BlueprintReadOnly, Category = Input, meta = (AllowPrivateAccess = "true"))
	class UInputAction* AutoLockTargetAction;

private:
	UPROPERTY(VisibleAnywhere, BlueprintReadOnly, Category = CombatReference, meta = (AllowPrivateAccess = "true"))
	class ACombatCharacter *PossessedCombatCharacter = nullptr;
	
	UPROPERTY(VisibleAnywhere, BlueprintReadOnly, Category = Gameplay, meta=(AllowPrivateAccess="true"))
	class UCombatTargetComponent *CurrentTarget = nullptr;
	
public:
	ACombatPlayerController();
	
public:
	virtual void BeginPlay() override;
	
	// Called every frame
	virtual void Tick(float DeltaTime) override;

protected:
	virtual void SetupInputComponent() override;
	virtual void OnPossess(APawn* InPawn) override;

public:
	UFUNCTION(BlueprintCallable)
	void AutoLockTargetClosestToViewCenter();

	UFUNCTION(BlueprintCallable)
	class UCombatTargetComponent *TryGetTargetClosestToViewCenter() const;
	
private:
	void handleMoveInput(FInputActionValue const &Value);
	void handleLookInput(FInputActionValue const& value);
	void handleAutoLockTargetInput();
};
